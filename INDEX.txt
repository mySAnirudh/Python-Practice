 
  
       **** PROMISES ****

   >>A JavaScript Promise object contains both the producing code and calls
    to the consuming code: When the executing code obtains the result, it
     should call one of the two callbacks: The Promise object supports two
      properties: state and result. While a Promise object is "pending"
       (working), the result is undefined. 



    Promises allow you to attach callback handlers to handle the future 
    asynchronous success value or failure reason.
Promises are often used to handle asynchronous tasks in JavaScript.
Before promises were introduced natively in JavaScript, we used a lot of 
callbacks for asynchronous tasks.
Promises executes code in order and must finish executing code before running 
the next one.
Promises provide catch mechanism, which callbacks do not have.
A promise will only return a value once, which means that if a promise returns
 an error, it will only return it once.
A lot of developers might still think that callbacks and promises are the same,
 but in fact, they are not.
Promises resemble callbacks in some ways, but with an easier to follow syntax 
and a better understanding of the code.
Sometimes we might hear that a promise is settled. That means that this 
promise is either fulfilled or rejected, settled is not a state but itâ€™s
 used just for convenience.

    Promise Syntax
The Syntax related to promise is mentioned below where, p is the promise 
object, resolve is the function that should be called when the promise 
executes 
successfully and reject is the function that should be called when the
 promise encounters 
an error.

  
